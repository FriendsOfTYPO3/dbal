a:2:{s:4:"meta";a:3:{s:5:"title";s:12:"DBAL package";s:5:"descr";s:0:"";s:7:"options";a:2:{s:10:"usageCount";s:1:"1";s:19:"includeCodeAbstract";s:1:"1";}}s:5:"files";a:4:{s:14:"MD5_9a0025a766";a:5:{s:8:"filename";s:21:"class.ux_t3lib_db.php";s:8:"filesize";i:43452;s:6:"header";a:5:{s:4:"text";s:35:"

TYPO3 database abstraction layer
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:3:{i:0;s:42:"@author	Kasper Skaarhoj <kasper@typo3.com>";i:1;s:14:"@package TYPO3";i:2;s:19:"@subpackage tx_dbal";}s:11:"other_index";a:3:{s:7:"@author";a:1:{i:0;s:34:"Kasper Skaarhoj <kasper@typo3.com>";}s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:8:"tx_dbal ";}}}s:3:"DAT";a:29:{i:1;a:8:{s:6:"header";s:36:"class ux_t3lib_DB extends t3lib_DB {";s:5:"class";i:1;s:11:"parentClass";s:11:"ux_t3lib_DB";s:4:"cDat";a:5:{s:4:"text";s:35:"

TYPO3 database abstraction layer
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:3:{i:0;s:42:"@author	Kasper Skaarhoj <kasper@typo3.com>";i:1;s:14:"@package TYPO3";i:2;s:19:"@subpackage tx_dbal";}s:11:"other_index";a:3:{s:7:"@author";a:1:{i:0;s:34:"Kasper Skaarhoj <kasper@typo3.com>";}s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:8:"tx_dbal ";}}}s:7:"content";a:2:{i:0;s:1311:"
		// Internal, static:
	var $printErrors = FALSE;			// Enable output of SQL errors after query executions. Set through TYPO3_CONF_VARS, see init()
	var $debug = FALSE;					// Enable debug mode. Set through TYPO3_CONF_VARS, see init()

	var $mapping = array();				// See manual.
	var $table2handlerKeys = array();	// See manual.	
	var $handlerCfg = array (			// See manual.
		'_DEFAULT' => array (
			'type' => 'native',
			'config' => array(
				'username' => '',		// Set by default (overridden)
				'password' => '',		// Set by default (overridden)
				'host' => '',			// Set by default (overridden)
				'database' => '',		// Set by default (overridden)
				'driver' => '',			// ONLY "adodb" / "pear" type; eg. "mysql"
			)
		),
	);


		// Internal, dynamic:
	var $handlerInstance = array();				// Contains instance of the handler objects as they are created. Exception is the native mySQL calls which are registered as an array with keys "handlerType" = "native" and "link" pointing to the link resource for the connection.
	var $lastHandlerKey = '';					// Storage of the handler key of last ( SELECT) query - used for subsequent fetch-row calls etc.
	var $lastQuery = '';						// Storage of last SELECT query

	var $resourceIdToTableNameMap = array();	// Mapping of resource ids to table names.


	
	
	
	
	";i:1;i:-1;}s:12:"content_size";i:1311;s:13:"content_lines";i:33;s:6:"atLine";i:104;}i:3;a:7:{s:6:"header";s:24:"function ux_t3lib_DB()	{";s:11:"parentClass";s:11:"ux_t3lib_DB";s:4:"cDat";a:3:{s:4:"text";s:109:"

Constructor. 
Creates SQL parser object and imports configuration from $TYPO3_CONF_VARS['EXTCONF']['dbal']
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:507:"		global $TYPO3_CONF_VARS;

			// Set outside configuration:
		if (isset($TYPO3_CONF_VARS['EXTCONF']['dbal']['mapping']))				$this->mapping = $TYPO3_CONF_VARS['EXTCONF']['dbal']['mapping'];
		if (isset($TYPO3_CONF_VARS['EXTCONF']['dbal']['table2handlerKeys']))	$this->table2handlerKeys = $TYPO3_CONF_VARS['EXTCONF']['dbal']['table2handlerKeys'];
		if (isset($TYPO3_CONF_VARS[
[...]
ethods)
	 * These functions are extending counterparts in the parent class.
	 * 
	 **************************************/

	";i:1;i:1;}s:12:"content_size";i:1046;s:13:"content_lines";i:30;s:6:"atLine";i:144;}i:5;a:8:{s:6:"header";s:50:"function exec_INSERTquery($table,$fields_values)	{";s:11:"parentClass";s:11:"ux_t3lib_DB";s:11:"sectionText";a:2:{i:0;s:42:"Query Building (Overriding parent methods)";i:1;s:63:"These functions are extending counterparts in the parent class.";}s:4:"cDat";a:3:{s:4:"text";s:84:"

Inserts a record for $table from the array with field/value pairs $fields_values.
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:10:"Table name";}i:1;a:2:{i:0;s:5:"array";i:1;s:191:"Field values as key=>value pairs. Values will be escaped internally. Typically you would fill an array like "$insertFields" with 'fieldname'=>'value' and pass it to this function as argument.";}}s:6:"return";a:2:{i:0;s:5:"mixed";i:1;s:67:"Result from handler, usually TRUE when success and FALSE on failure";}}s:7:"content";a:2:{i:0;s:507:"
			// Do field mapping if needed:
		if ($tableArray = $this->map_needMapping($table))	{
		
				// Field mapping of array:
			$fields_values = $this->map_assocArray($fields_values,$tableArray);

				// Table name:
			if ($this->mapping[$table]['mapTableName'])	{
				$table = $this->mapping[$table]['mapTableName'];
			}
		}

			// Select API:
		$this->lastHandlerKey = $this
[...]
->printErrors && $this->sql_error())	{ debug(array($this->sql_error()));	}
		
			// Return output:
		return $sqlResult;
	}

	";i:1;i:1;}s:12:"content_size";i:1697;s:13:"content_lines";i:43;s:6:"atLine";i:182;}i:7;a:7:{s:6:"header";s:57:"function exec_UPDATEquery($table,$where,$fields_values)	{";s:11:"parentClass";s:11:"ux_t3lib_DB";s:4:"cDat";a:3:{s:4:"text";s:31:"

Updates a record from $table
";s:5:"param";a:3:{i:0;a:2:{i:0;s:6:"string";i:1;s:18:"Database tablename";}i:1;a:2:{i:0;s:6:"string";i:1;s:107:"WHERE clause, eg. "uid=1". NOTICE: You must escape values in this argument with $this->quoteStr() yourself!";}i:2;a:2:{i:0;s:5:"array";i:1;s:191:"Field values as key=>value pairs. Values will be escaped internally. Typically you would fill an array like "$updateFields" with 'fieldname'=>'value' and pass it to this function as argument.";}}s:6:"return";a:2:{i:0;s:5:"mixed";i:1;s:67:"Result from handler, usually TRUE when success and FALSE on failure";}}s:7:"content";a:2:{i:0;s:507:"
			// Do table/field mapping:
		if ($tableArray = $this->map_needMapping($table))	{
		
				// Field mapping of array:
			$fields_values = $this->map_assocArray($fields_values,$tableArray);
			
				// Where clause table and field mapping:
			$whereParts = $this->SQLparser->parseWhereClause($where);
			$this->map_sqlParts($whereParts,$tableArray[0]['table']);
			$where = $t
[...]
->printErrors && $this->sql_error())	{ debug(array($this->sql_error()));	}
		
			// Return result:
		return $sqlResult;
	}

	";i:1;i:1;}s:12:"content_size";i:1804;s:13:"content_lines";i:45;s:6:"atLine";i:234;}i:9;a:7:{s:6:"header";s:42:"function exec_DELETEquery($table,$where)	{";s:11:"parentClass";s:11:"ux_t3lib_DB";s:4:"cDat";a:3:{s:4:"text";s:29:"

Deletes records from table
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:18:"Database tablename";}i:1;a:2:{i:0;s:6:"string";i:1;s:107:"WHERE clause, eg. "uid=1". NOTICE: You must escape values in this argument with $this->quoteStr() yourself!";}}s:6:"return";a:2:{i:0;s:5:"mixed";i:1;s:19:"Result from handler";}}s:7:"content";a:2:{i:0;s:507:"
			// Do table/field mapping:
		if ($tableArray = $this->map_needMapping($table))	{

				// Where clause:
			$whereParts = $this->SQLparser->parseWhereClause($where);
			$this->map_sqlParts($whereParts,$tableArray[0]['table']);
			$where = $this->SQLparser->compileWhereClause($whereParts);

				// Table name:
			if ($this->mapping[$table]['mapTableName'])	{
				$table = $
[...]
->printErrors && $this->sql_error())	{ debug(array($this->sql_error()));	}
		
			// Return result:
		return $sqlResult;
	}

	";i:1;i:1;}s:12:"content_size";i:1419;s:13:"content_lines";i:40;s:6:"atLine";i:287;}i:11;a:7:{s:6:"header";s:103:"function exec_SELECTquery($select_fields,$from_table,$where_clause,$groupBy='',$orderBy='',$limit='')	{";s:11:"parentClass";s:11:"ux_t3lib_DB";s:4:"cDat";a:3:{s:4:"text";s:35:"

Selects records from Data Source
";s:5:"param";a:6:{i:0;a:2:{i:0;s:6:"string";i:1;s:101:"List of fields to select from the table. This is what comes right after "SELECT ...". Required value.";}i:1;a:2:{i:0;s:6:"string";i:1;s:89:"Table(s) from which to select. This is what comes right after "FROM ...". Required value.";}i:2;a:2:{i:0;s:6:"string";i:1;s:186:"Optional additional WHERE clauses put in the end of the query. NOTICE: You must escape values in this argument with $this->quoteStr() yourself! DO NOT PUT IN GROUP BY, ORDER BY or LIMIT!";}i:3;a:2:{i:0;s:6:"string";i:1;s:57:"Optional GROUP BY field(s), if none, supply blank string.";}i:4;a:2:{i:0;s:6:"string";i:1;s:57:"Optional ORDER BY field(s), if none, supply blank string.";}i:5;a:2:{i:0;s:6:"string";i:1;s:65:"Optional LIMIT value ([begin,]max), if none, supply blank string.";}}s:6:"return";a:2:{i:0;s:5:"mixed";i:1;s:55:"Result from handler. Typically object from DBAL layers.";}}s:7:"content";a:2:{i:0;s:507:"
		if ($this->debug)	$pt = t3lib_div::milliseconds();

			// Map table / field names if needed:
		$ORIG_from_table = $from_table;	// Saving table names in $ORIG_from_table since $from_table is transformed beneath:
		if ($tableArray = $this->map_needMapping($ORIG_from_table))	{
			$this->map_remapSELECTQueryParts($select_fields,$from_table,$where_clause,$groupBy,$orderBy);	
[...]

	
	/**************************************
	 *
	 * Various helper functions
	 *
	 **************************************/

	";i:1;i:1;}s:12:"content_size";i:4084;s:13:"content_lines";i:115;s:6:"atLine";i:339;}i:13;a:8:{s:6:"header";s:36:"function quoteStr($str, $table='')	{";s:11:"parentClass";s:11:"ux_t3lib_DB";s:11:"sectionText";a:1:{i:0;s:24:"Various helper functions";}s:4:"cDat";a:3:{s:4:"text";s:129:"

Perform context sensitive escaping of strings. This may be "addslashes()" or whatever method fits the current database driver.
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:12:"Input string";}i:1;a:2:{i:0;s:6:"string";i:1;s:143:"Table name for which to quote string. Just enter which table(s) that goes into the query. Important for detection of DBMS handler of the query!";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:79:"Output string; Quotes (" / ') and \ will be backslashed according to DBMS used.";}}s:7:"content";a:2:{i:0;s:507:"		$this->lastHandlerKey = $this->handler_getFromTableList($table);
		switch((string)$this->handlerCfg[$this->lastHandlerKey]['type'])	{
			case 'native':
				$str = addslashes($str);
			break;
			case 'adodb':
				$str = $this->handlerInstance[$this->lastHandlerKey]->qstr($str);
			break;
			case 'pear':
				$str = $this->handlerInstance[$this->lastHandlerKey]->quoteString
[...]
per functions (Overriding parent methods)
	 * (For use in your applications)
	 *
	 **************************************/

	";i:1;i:1;}s:12:"content_size";i:779;s:13:"content_lines";i:38;s:6:"atLine";i:462;}i:15;a:8:{s:6:"header";s:22:"function sql_error()	{";s:11:"parentClass";s:11:"ux_t3lib_DB";s:11:"sectionText";a:2:{i:0;s:49:"SQL wrapper functions (Overriding parent methods)";i:1;s:30:"(For use in your applications)";}s:4:"cDat";a:3:{s:4:"text";s:95:"

Returns the error status on the most recent sql() execution (based on $this->lastHandlerKey)
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:21:"Handler error strings";}}s:7:"content";a:2:{i:0;s:507:"
		switch($this->handlerCfg[$this->lastHandlerKey]['type'])	{
			case 'native':
				$output = mysql_error($this->handlerInstance[$this->lastHandlerKey]['link']);
			break;
			case 'adodb':
				$output = $this->handlerInstance[$this->lastHandlerKey]->ErrorMsg();
			break;
			case 'pear':
				// PEAR returns an ERROR object if something is wrong. For other APIs the error is 
[...]
userdefined':
				$output = $this->handlerInstance[$this->lastHandlerKey]->sql_error();
			break;
		}
		return $output;
	}

	";i:1;i:1;}s:12:"content_size";i:777;s:13:"content_lines";i:20;s:6:"atLine";i:506;}i:17;a:7:{s:6:"header";s:30:"function sql_num_rows(&$res)	{";s:11:"parentClass";s:11:"ux_t3lib_DB";s:4:"cDat";a:3:{s:4:"text";s:39:"

Returns the number of selected rows.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:7:"pointer";i:1;s:28:"Result pointer / DBAL object";}}s:6:"return";a:2:{i:0;s:7:"integer";i:1;s:25:"Number of resulting rows.";}}s:7:"content";a:2:{i:0;s:381:"
		$handlerType = is_object($res) ? $res->TYPO3_DBAL_handlerType : 'native';
		switch($handlerType)	{
			case 'native':
				$output = mysql_num_rows($res);
			break;
			case 'adodb':
				$output = $res->RecordCount();
			break;
			case 'pear':
				$output = $res->numRows();
			break;
			case 'userdefined':
				$output = $res->sql_num_rows();
			break;
		}
		return $output;
	}

	";i:1;i:0;}s:12:"content_size";i:381;s:13:"content_lines";i:19;s:6:"atLine";i:533;}i:19;a:7:{s:6:"header";s:33:"function sql_fetch_assoc(&$res)	{";s:11:"parentClass";s:11:"ux_t3lib_DB";s:4:"cDat";a:3:{s:4:"text";s:104:"

Returns an associative array that corresponds to the fetched row, or FALSE if there are no more rows.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:7:"pointer";i:1;s:52:"MySQL result pointer (of SELECT query) / DBAL object";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:32:"Associative array of result row.";}}s:7:"content";a:2:{i:0;s:507:"
		$handlerType = is_object($res) ? $res->TYPO3_DBAL_handlerType :  'native';
		switch($handlerType)	{
			case 'native':
				$output = mysql_fetch_assoc($res);
				$tableList = $this->resourceIdToTableNameMap[(string)$res];	// Reading list of tables from SELECT query:
			break;
			case 'adodb':
				$output = $res->FetchRow();
				$tableList = $res->TYPO3_DBAL_tableList;	//
[...]
eList,TRUE))	{
				$output = $this->map_assocArray($output,$tables,1);
			}
		}

			// Return result:
		return $output;
	}

	";i:1;i:1;}s:12:"content_size";i:1324;s:13:"content_lines";i:40;s:6:"atLine";i:559;}i:21;a:7:{s:6:"header";s:31:"function sql_fetch_row(&$res)	{";s:11:"parentClass";s:11:"ux_t3lib_DB";s:4:"cDat";a:3:{s:4:"text";s:144:"

Returns an array that corresponds to the fetched row, or FALSE if there are no more rows.
The array contains the values in numerical indices.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:7:"pointer";i:1;s:52:"MySQL result pointer (of SELECT query) / DBAL object";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:23:"Array with result rows.";}}s:7:"content";a:2:{i:0;s:507:"
		$handlerType = is_object($res) ? $res->TYPO3_DBAL_handlerType :  'native';
		switch($handlerType)	{
			case 'native':
				$output = mysql_fetch_row($res);
			break;
			case 'adodb':
				$output = $res->FetchRow();
				
					// Removing all assoc. keys. 
					// Just a temporary workaround till I know how to make ADOdb return this by default... Most likely this will not 
[...]
TCHMODE_ORDERED);
			break;
			case 'userdefined':
				$output = $res->sql_fetch_row();
			break;
		}
		return $output;
	}

	";i:1;i:1;}s:12:"content_size";i:732;s:13:"content_lines";i:27;s:6:"atLine";i:607;}i:23;a:7:{s:6:"header";s:33:"function sql_free_result(&$res)	{";s:11:"parentClass";s:11:"ux_t3lib_DB";s:4:"cDat";a:3:{s:4:"text";s:21:"

Free result memory
";s:5:"param";a:1:{i:0;a:2:{i:0;s:7:"pointer";i:1;s:42:"MySQL result pointer to free / DBAL object";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:44:"Returns TRUE on success or FALSE on failure.";}}s:7:"content";a:2:{i:0;s:326:"
		$handlerType = is_object($res) ? $res->TYPO3_DBAL_handlerType :  'native';
		switch($handlerType)	{
			case 'native':
				$output = mysql_free_result($res);
			break;
			case 'adodb':
				# ?
			break;
			case 'pear':
				$res->free();
			break;
			case 'userdefined':
				unset($res);
			break;
		}
		return $output;
	}

	";i:1;i:0;}s:12:"content_size";i:326;s:13:"content_lines";i:19;s:6:"atLine";i:641;}i:25;a:7:{s:6:"header";s:26:"function sql_insert_id()	{";s:11:"parentClass";s:11:"ux_t3lib_DB";s:4:"cDat";a:3:{s:4:"text";s:58:"

Get the ID generated from the previous INSERT operation
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:7:"integer";i:1;s:36:"The uid of the last inserted record.";}}s:7:"content";a:2:{i:0;s:516:"
		switch($this->handlerCfg[$this->lastHandlerKey]['type'])	{
			case 'native':
				$output = mysql_insert_id($this->handlerInstance[$this->lastHandlerKey]['link']);
			break;
			case 'adodb':
				$output = $this->handlerInstance[$this->lastHandlerKey]->Insert_ID();
			break;
			case 'pear':
				$output = mysql_insert_id();	// WILL NOT BE THE FINAL SOLUTION HERE!!!
			break;
			case 'userdefined':
				$output = $this->handlerInstance[$this->lastHandlerKey]->sql_insert_id();
			break;
		}
		return $output;
	}

	";i:1;i:0;}s:12:"content_size";i:516;s:13:"content_lines";i:18;s:6:"atLine";i:666;}i:27;a:7:{s:6:"header";s:30:"function sql_affected_rows()	{";s:11:"parentClass";s:11:"ux_t3lib_DB";s:4:"cDat";a:3:{s:4:"text";s:81:"

Returns the number of rows affected by the last INSERT, UPDATE or DELETE query
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:7:"integer";i:1;s:37:"Number of rows affected by last query";}}s:7:"content";a:2:{i:0;s:477:"
		switch($this->handlerCfg[$this->lastHandlerKey]['type'])	{
			case 'native':
				$output = mysql_affected_rows();
			break;
			case 'adodb':
				$output = $this->handlerInstance[$this->lastHandlerKey]->Affected_Rows();
			break;
			case 'pear':
				$output = $this->handlerInstance[$this->lastHandlerKey]->affectedRows();
			break;
			case 'userdefined':
				$output = $this->handlerInstance[$this->lastHandlerKey]->sql_affected_rows();
			break;
		}
		return $output;
	}

	";i:1;i:0;}s:12:"content_size";i:477;s:13:"content_lines";i:18;s:6:"atLine";i:690;}i:29;a:7:{s:6:"header";s:37:"function sql_data_seek(&$res,$seek)	{";s:11:"parentClass";s:11:"ux_t3lib_DB";s:4:"cDat";a:3:{s:4:"text";s:31:"

Move internal result pointer
";s:5:"param";a:2:{i:0;a:2:{i:0;s:7:"pointer";i:1;s:52:"MySQL result pointer (of SELECT query) / DBAL object";}i:1;a:2:{i:0;s:7:"integer";i:1;s:19:"Seek result number.";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:44:"Returns TRUE on success or FALSE on failure.";}}s:7:"content";a:2:{i:0;s:383:"
		$handlerType = is_object($res) ? $res->TYPO3_DBAL_handlerType :  'native';
		switch($handlerType)	{
			case 'native':
				$output = mysql_data_seek($res,$seek);
			break;
			case 'adodb':
				$output = $res->Move($seek);
			break;
			case 'pear':
				# ??? - no idea!
			break;
			case 'userdefined':
				$output = $res->sql_data_seek($seek);
			break;
		}
		return $output;
	}

	";i:1;i:0;}s:12:"content_size";i:383;s:13:"content_lines";i:19;s:6:"atLine";i:716;}i:31;a:7:{s:6:"header";s:41:"function sql_field_type(&$res,$pointer)	{";s:11:"parentClass";s:11:"ux_t3lib_DB";s:4:"cDat";a:3:{s:4:"text";s:50:"

Get the type of the specified field in a result
";s:5:"param";a:2:{i:0;a:2:{i:0;s:7:"pointer";i:1;s:52:"MySQL result pointer (of SELECT query) / DBAL object";}i:1;a:2:{i:0;s:7:"integer";i:1;s:12:"Field index.";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:45:"Returns the name of the specified field index";}}s:7:"content";a:2:{i:0;s:476:"
		$handlerType = is_object($res) ? $res->TYPO3_DBAL_handlerType :  'native';
		switch($handlerType)	{
			case 'native':
				$output = mysql_field_type($res,$pointer);
			break;
			case 'adodb':
			break;
			case 'pear':
			break;
			case 'userdefined':
				$output = $res->sql_field_type($pointer);
			break;
		}
		return $output;
	}
	







	/**********
	 *
	 * Legacy functions, bound to _DEFAULT handler. (Overriding parent methods)
	 * Depreciated.
	 *
	 **********/
	
	";i:1;i:0;}s:12:"content_size";i:476;s:13:"content_lines";i:31;s:6:"atLine";i:743;}i:33;a:8:{s:6:"header";s:26:"function sql($db,$query)	{";s:11:"parentClass";s:11:"ux_t3lib_DB";s:11:"sectionText";a:2:{i:0;s:72:"Legacy functions, bound to _DEFAULT handler. (Overriding parent methods)";i:1;s:12:"Depreciated.";}s:4:"cDat";a:5:{s:4:"text";s:99:"

Executes query (on DEFAULT handler!)
DEPRECIATED - use exec_* functions from this class instead!
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:13:"Database name";}i:1;a:2:{i:0;s:6:"string";i:1;s:16:"Query to execute";}}s:6:"return";a:2:{i:0;s:7:"pointer";i:1;s:14:"Result pointer";}s:5:"other";a:1:{i:0;s:12:"@depreciated";}s:11:"other_index";a:1:{s:12:"@depreciated";a:1:{i:0;s:1:" ";}}}s:7:"content";a:2:{i:0;s:40:"		return $this->sql_query($query);
	}

	";i:1;i:0;}s:12:"content_size";i:40;s:13:"content_lines";i:3;s:6:"atLine";i:784;}i:35;a:7:{s:6:"header";s:28:"function sql_query($query)	{";s:11:"parentClass";s:11:"ux_t3lib_DB";s:4:"cDat";a:5:{s:4:"text";s:99:"

Executes query (on DEFAULT handler!)
DEPRECIATED - use exec_* functions from this class instead!
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:16:"Query to execute";}}s:6:"return";a:2:{i:0;s:7:"pointer";i:1;s:28:"Result pointer / DBAL object";}s:5:"other";a:1:{i:0;s:12:"@depreciated";}s:11:"other_index";a:1:{s:12:"@depreciated";a:1:{i:0;s:1:" ";}}}s:7:"content";a:2:{i:0;s:507:"		
		switch($this->handlerCfg['_DEFAULT']['type'])	{
			case 'native':
				$sqlResult = mysql_query($query, $this->handlerInstance['_DEFAULT']['link']);
			break;
			case 'adodb':
				$sqlResult = $this->handlerInstance['_DEFAULT']->Execute($query);
			break;
			case 'pear':
				$sqlResult = $this->handlerInstance['_DEFAULT']->query($query);
				$this->handlerInstance['_DE
[...]
errors:		
		if ($this->printErrors && $this->sql_error())	{ debug(array($this->sql_error()));	}
		
		return $sqlResult;
	}

	";i:1;i:1;}s:12:"content_size";i:724;s:13:"content_lines";i:23;s:6:"atLine";i:796;}i:37;a:7:{s:6:"header";s:79:"function sql_pconnect($TYPO3_db_host, $TYPO3_db_username, $TYPO3_db_password)	{";s:11:"parentClass";s:11:"ux_t3lib_DB";s:4:"cDat";a:5:{s:4:"text";s:258:"

Opening the _DEFAULT connection handler to the database.
This is typically done by the scripts "init.php" in the backend or "index_ts.php" in the frontend (tslib_fe->connectToMySQL())
You wouldn't need to use this at any time - let TYPO3 core handle this.
";s:5:"param";a:3:{i:0;a:2:{i:0;s:6:"string";i:1;s:23:"Database host IP/domain";}i:1;a:2:{i:0;s:6:"string";i:1;s:25:"Username to connect with.";}i:2;a:2:{i:0;s:6:"string";i:1;s:25:"Password to connect with.";}}s:6:"return";a:2:{i:0;s:5:"mixed";i:1;s:32:"Returns handler connection value";}s:5:"other";a:2:{i:0;s:12:"@depreciated";i:1;s:19:"@see handler_init()";}s:11:"other_index";a:2:{s:12:"@depreciated";a:1:{i:0;s:1:" ";}s:4:"@see";a:1:{i:0;s:15:"handler_init() ";}}}s:7:"content";a:2:{i:0;s:503:"
			// Overriding the _DEFAULT handler configuration of username, password, localhost and database name:
		$this->handlerCfg['_DEFAULT']['config']['username'] = $TYPO3_db_username;
		$this->handlerCfg['_DEFAULT']['config']['password'] = $TYPO3_db_password;
		$this->handlerCfg['_DEFAULT']['config']['host'] = $TYPO3_db_host;
		$this->handlerCfg['_DEFAULT']['config']['database'] = TYPO3_db;

			// Initializing and output value:
		$sqlResult = $this->handler_init('_DEFAULT');
		return $sqlResult;
	}

	";i:1;i:0;}s:12:"content_size";i:503;s:13:"content_lines";i:12;s:6:"atLine";i:832;}i:39;a:7:{s:6:"header";s:35:"function sql_select_db($TYPO3_db)	{";s:11:"parentClass";s:11:"ux_t3lib_DB";s:4:"cDat";a:5:{s:4:"text";s:40:"

Select database for _DEFAULT handler.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:23:"Database to connect to.";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:97:"Always returns true; function is obsolete, database selection is made in handler_init() function!";}s:5:"other";a:1:{i:0;s:12:"@depreciated";}s:11:"other_index";a:1:{s:12:"@depreciated";a:1:{i:0;s:1:" ";}}}s:7:"content";a:2:{i:0;s:161:"		return TRUE;
	}










	











	


	/************************************
	 * 
	 * Handler management
	 * 
	 **************************************/

	";i:1;i:0;}s:12:"content_size";i:161;s:13:"content_lines";i:33;s:6:"atLine";i:852;}i:41;a:8:{s:6:"header";s:47:"function handler_getFromTableList($tableList)	{";s:11:"parentClass";s:11:"ux_t3lib_DB";s:11:"sectionText";a:1:{i:0;s:18:"Handler management";}s:4:"cDat";a:3:{s:4:"text";s:294:"

Return the handler key pointing to an appropriate database handler as found in $this->handlerCfg array
Notice: TWO or more tables in the table list MUST use the SAME handler key - otherwise a fatal error is thrown! (Logically, no database can possibly join two tables from separate sources!)
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:79:"Table list, eg. "pages" or "pages, tt_content" or "pages AS A, tt_content AS B"";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:51:"Handler key (see $this->handlerCfg array) for table";}}s:7:"content";a:2:{i:0;s:507:"
			// Get tables separated:
		$tableArray = $this->SQLparser->parseFromTables($tableList);
		
			// If success, traverse the tables:
		if (is_array($tableArray) && count($tableArray))	{
			foreach($tableArray as $vArray)	{
			
					// Find handler key, select "_DEFAULT" if none is specifically configured:
				$handlerKey = $this->table2handlerKeys[$vArray['table']] ? $thi
[...]
handler key:
			return $outputHandlerKey;
		} else {
			die('DBAL fatal error: No tables found: "'.$tableList.'"');
		}
	}

	";i:1;i:1;}s:12:"content_size";i:1067;s:13:"content_lines";i:31;s:6:"atLine";i:893;}i:43;a:7:{s:6:"header";s:36:"function handler_init($handlerKey)	{";s:11:"parentClass";s:11:"ux_t3lib_DB";s:4:"cDat";a:5:{s:4:"text";s:46:"

Initialize handler (connecting to database)
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:11:"Handler key";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:36:"If connection went well, return true";}s:5:"other";a:1:{i:0;s:31:"@see handler_getFromTableList()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:27:"handler_getFromTableList() ";}}}s:7:"content";a:2:{i:0;s:507:"
			// Find handler configuration:
		$cfgArray = $this->handlerCfg[$handlerKey];
		$handlerType = (string)$cfgArray['type'];
		$output = FALSE;
		
		if (is_array($cfgArray))	{
			switch($handlerType)	{
				case 'native':
					$link = mysql_pconnect(
									$cfgArray['config']['host'], 
									$cfgArray['config']['username'], 
									$cfgArray['config']['password']
		
[...]








	/************************************
	 * 
	 * Table/Field mapping
	 * 
	 **************************************/

	";i:1;i:1;}s:12:"content_size";i:2638;s:13:"content_lines";i:101;s:6:"atLine";i:932;}i:45;a:8:{s:6:"header";s:62:"function map_needMapping($tableList,$fieldMappingOnly=FALSE)	{";s:11:"parentClass";s:11:"ux_t3lib_DB";s:11:"sectionText";a:1:{i:0;s:19:"Table/Field mapping";}s:4:"cDat";a:3:{s:4:"text";s:48:"

Checks if mapping is needed for a table(list)
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:23:"List of tables in query";}i:1;a:2:{i:0;s:7:"boolean";i:1;s:93:"If true, it will check only if FIELDs are configured and ignore the mapped table name if any.";}}s:6:"return";a:2:{i:0;s:5:"mixed";i:1;s:107:"Returns an array of table names (parsed version of input table) if mapping is needed, otherwise just false.";}}s:7:"content";a:2:{i:0;s:342:"		$tables = $this->SQLparser->parseFromTables($tableList);
		if (is_array($tables))	{
			foreach($tables as $tableCfg)	{
				if ($fieldMappingOnly)	{
					if (is_array($this->mapping[$tableCfg['table']]['mapFieldNames']))	return $tables;
				} else {
					if (is_array($this->mapping[$tableCfg['table']]))	return $tables;
				}
			}
		}
	}

	";i:1;i:0;}s:12:"content_size";i:342;s:13:"content_lines";i:12;s:6:"atLine";i:1041;}i:47;a:7:{s:6:"header";s:52:"function map_assocArray($input,$tables,$rev=FALSE)	{";s:11:"parentClass";s:11:"ux_t3lib_DB";s:4:"cDat";a:3:{s:4:"text";s:494:"

Takes an associated array with field => value pairs and remaps the field names if configured for this table in $this->mapping array.
Be careful not to map a field name to another existing fields name (although you can use this to swap fieldnames of course...:-)
Observe mapping problems with join-results (more than one table): Joined queries should always prefix the table name to avoid problems with this.
Observe that alias fields are not mapped of course (should not be a problem though)
";s:5:"param";a:3:{i:0;a:2:{i:0;s:5:"array";i:1;s:29:"Input array, associative keys";}i:1;a:2:{i:0;s:5:"array";i:1;s:343:"Array of tables from the query. Normally just one table; many tables in case of a join. NOTICE: for multiple tables (with joins) there MIGHT occur trouble with fields of the same name in the two tables: This function traverses the mapping information for BOTH tables and applies mapping without checking from which table the field really came!";}i:2;a:2:{i:0;s:7:"boolean";i:1;s:145:"If true, reverse direction. Default direction is to map an array going INTO the database (thus mapping TYPO3 fieldnames to PHYSICAL field names!)";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:43:"Output array, with mapped associative keys.";}}s:7:"content";a:2:{i:0;s:507:"
			// Traverse tables from query (hopefully only one table):
		foreach($tables as $tableCfg)	{
			if (is_array($this->mapping[$tableCfg['table']]['mapFieldNames']))	{
			
					// Get the map (reversed if needed):
				if ($rev)	{
					$theMap = array_flip($this->mapping[$tableCfg['table']]['mapFieldNames']);
				} else {
					$theMap = $this->mapping[$tableCfg['table']]['m
[...]
	$input = $output;
			}
		}

			// Return input array (which might have been altered in the mean time)
		return $input;
	}

	";i:1;i:1;}s:12:"content_size";i:950;s:13:"content_lines";i:36;s:6:"atLine";i:1065;}i:49;a:7:{s:6:"header";s:101:"function map_remapSELECTQueryParts(&$select_fields,&$from_table,&$where_clause,&$groupBy,&$orderBy)	{";s:11:"parentClass";s:11:"ux_t3lib_DB";s:4:"cDat";a:5:{s:4:"text";s:100:"

Remaps table/field names in a SELECT query's parts
Notice: All arguments are passed by reference!
";s:5:"param";a:5:{i:0;a:2:{i:0;s:6:"string";i:1;s:101:"List of fields to select from the table. This is what comes right after "SELECT ...". Required value.";}i:1;a:2:{i:0;s:6:"string";i:1;s:88:"Table(s) from which to select. This is what comes right after "FROM ...". Require value.";}i:2;a:2:{i:0;s:6:"string";i:1;s:71:"Where clause. This is what comes right after "WHERE ...". Can be blank.";}i:3;a:2:{i:0;s:6:"string";i:1;s:17:"Group by field(s)";}i:4;a:2:{i:0;s:6:"string";i:1;s:17:"Order by field(s)";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:1:{i:0;s:23:"@see exec_SELECTquery()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:19:"exec_SELECTquery() ";}}}s:7:"content";a:2:{i:0;s:507:"		
			// Tables:
		$tables = $this->SQLparser->parseFromTables($from_table);
		$defaultTable = $tables[0]['table'];
		foreach($tables as $k => $v)	{
			if ($this->mapping[$v['table']]['mapTableName'])	{
				$tables[$k]['table'] = $this->mapping[$v['table']]['mapTableName'];
			}
		}	
		$from_table = $this->SQLparser->compileFromTables($tables);

			// Where clause:
		$wher
[...]
erBy);
		$this->map_sqlParts($expFields,$defaultTable);
		$orderBy = $this->SQLparser->compileSelectFields($expFields);
	}

	";i:1;i:1;}s:12:"content_size";i:1164;s:13:"content_lines";i:32;s:6:"atLine";i:1114;}i:51;a:7:{s:6:"header";s:54:"function map_sqlParts(&$sqlPartArray, $defaultTable)	{";s:11:"parentClass";s:11:"ux_t3lib_DB";s:4:"cDat";a:6:{s:4:"text";s:77:"

Generic mapping of table/field names arrays (as parsed by t3lib_sqlengine)
";s:5:"param";a:2:{i:0;a:2:{i:0;s:5:"array";i:1;s:109:"Array with parsed SQL parts; Takes both fields, tables, where-parts, group and order-by. Passed by reference.";}i:1;a:2:{i:0;s:6:"string";i:1;s:66:"Default table name to assume if no table is found in $sqlPartArray";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:6:"access";s:7:"private";s:5:"other";a:1:{i:0;s:32:"@see map_remapSELECTQueryParts()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:28:"map_remapSELECTQueryParts() ";}}}s:7:"content";a:2:{i:0;s:507:"
			// Traverse sql Part array:
		if (is_array($sqlPartArray))	{
			foreach($sqlPartArray as $k => $v)	{

					// Look for sublevel (WHERE parts only)
				if (is_array($sqlPartArray[$k]['sub']))	{
					$this->map_sqlParts($sqlPartArray[$k]['sub'], $defaultTable);	// Call recursively!
				} else {
						// For the field, look for table mapping (generic):
					$t = $sqlPartA
[...]













	


	/**************************************
	 *
	 * Debugging
	 *
	 **************************************/
	
	";i:1;i:1;}s:12:"content_size";i:1088;s:13:"content_lines";i:49;s:6:"atLine";i:1156;}i:53;a:8:{s:6:"header";s:52:"function debugHandler($function,$execTime,$inData)	{";s:11:"parentClass";s:11:"ux_t3lib_DB";s:11:"sectionText";a:1:{i:0;s:9:"Debugging";}s:4:"cDat";a:4:{s:4:"text";s:16:"

Debug handler
";s:5:"param";a:3:{i:0;a:2:{i:0;s:6:"string";i:1;s:49:"Function name from which this function is called.";}i:1;a:2:{i:0;s:6:"string";i:1;s:33:"Execution time in ms of the query";}i:2;a:2:{i:0;s:5:"array";i:1;s:25:"In-data of various kinds.";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:6:"access";s:7:"private";}s:7:"content";a:2:{i:0;s:507:"		global $TYPO3_CONF_VARS;
		
		switch($function)	{
			case 'exec_SELECTquery':

					// Initialize:
				$data = array();
				$errorFlag = 0;
				$joinTable = '';

					// Check error:
				if ($this->sql_error())	{
					$data['sqlError'] = $this->sql_error();
					$errorFlag|=1;
				}

					// Get explain data:
				if ($TYPO3_CONF_VARS['EXTCONF']['dbal']['debugOptions']['E
[...]
inTable,$errorFlag);
			break;			
			case 'exec_INSERTquery':
				// Filter out tx_dbal_debuglog table!!!
			break;
		}
	}

	";i:1;i:1;}s:12:"content_size";i:1875;s:13:"content_lines";i:55;s:6:"atLine";i:1215;}i:55;a:4:{s:6:"header";s:55:"function debug_log($query,$ms,$data,$join,$errorFlag)	{";s:11:"parentClass";s:11:"ux_t3lib_DB";s:4:"cDat";a:3:{s:4:"text";s:30:"

Insert row in the log table
";s:5:"param";a:5:{i:0;a:2:{i:0;s:6:"string";i:1;s:17:"The current query";}i:1;a:2:{i:0;s:7:"integer";i:1;s:39:"Execution time of query in milliseconds";}i:2;a:2:{i:0;s:5:"array";i:1;s:29:"Data to be stored serialized.";}i:3;a:2:{i:0;s:6:"string";i:1;s:31:"Join string if there IS a join.";}i:4;a:2:{i:0;s:7:"integer";i:1;s:13:"Error status.";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:6:"atLine";i:1281;}i:57;a:7:{s:6:"header";s:32:"function debug_explain($query)	{";s:11:"parentClass";s:11:"ux_t3lib_DB";s:4:"cDat";a:5:{s:4:"text";s:44:"

Perform EXPLAIN query on DEFAULT handler!
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:12:"SELECT Query";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:35:"The Explain result rows in an array";}s:5:"other";a:1:{i:0;s:121:"@todo	Not supporting other than the default handler? And what about DBMS of other kinds than MySQl - support for EXPLAIN?";}s:11:"other_index";a:1:{s:5:"@todo";a:1:{i:0;s:115:"Not supporting other than the default handler? And what about DBMS of other kinds than MySQl - support for EXPLAIN?";}}}s:7:"content";a:2:{i:0;s:365:"		$res = $this->sql_query('EXPLAIN '.$query);
		
		$output = array();
		while($row = $this->sql_fetch_assoc($res))	{
			$output[] = $row;
		}
		return $output;
	}
}


if (defined('TYPO3_MODE') && $TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/dbal/class.ux_t3lib_db.php'])	{
	include_once($TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/dbal/class.ux_t3lib_db.php']);
}
?>";i:1;i:0;}s:12:"content_size";i:365;s:13:"content_lines";i:14;s:6:"atLine";i:1307;}}s:10:"usageCount";a:29:{s:12:"H_8f6fb71e0a";a:2:{s:24:"_searchtime_milliseconds";d:140;s:15:"_functionHeader";s:36:"class ux_t3lib_DB extends t3lib_DB {";}s:12:"H_1ed75ac0ec";a:2:{s:24:"_searchtime_milliseconds";d:27;s:15:"_functionHeader";s:24:"function ux_t3lib_DB()	{";}s:12:"H_9b291e60c2";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:2;s:5:"TOTAL";i:2;}s:14:"MD5_9a0025a766";a:3:{s:8:"fileName";s:21:"class.ux_t3lib_db.php";s:11:"objectUsage";i:2;s:5:"TOTAL";i:2;}s:24:"_searchtime_milliseconds";d:41;s:15:"_functionHeader";s:50:"function exec_INSERTquery($table,$fields_values)	{";}s:12:"H_495e478a6a";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_9a0025a766";a:3:{s:8:"fileName";s:21:"class.ux_t3lib_db.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:38;s:15:"_functionHeader";s:57:"function exec_UPDATEquery($table,$where,$fields_values)	{";}s:12:"H_7cdface6fe";a:5:{s:3:"ALL";a:2:{s:11:"objectUsage";i:2;s:5:"TOTAL";i:2;}s:14:"MD5_9a0025a766";a:3:{s:8:"fileName";s:21:"class.ux_t3lib_db.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_19aaeae789";a:3:{s:8:"fileName";s:14:"mod1/index.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:31;s:15:"_functionHeader";s:42:"function exec_DELETEquery($table,$where)	{";}s:12:"H_01a2a95614";a:5:{s:3:"ALL";a:2:{s:11:"objectUsage";i:5;s:5:"TOTAL";i:5;}s:14:"MD5_9a0025a766";a:3:{s:8:"fileName";s:21:"class.ux_t3lib_db.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_19aaeae789";a:3:{s:8:"fileName";s:14:"mod1/index.php";s:11:"objectUsage";i:4;s:5:"TOTAL";i:4;}s:24:"_searchtime_milliseconds";d:32;s:15:"_functionHeader";s:103:"function exec_SELECTquery($select_fields,$from_table,$where_clause,$groupBy='',$orderBy='',$limit='')	{";}s:12:"H_4e4ae1f4ef";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:4;s:5:"TOTAL";i:4;}s:14:"MD5_9a0025a766";a:3:{s:8:"fileName";s:21:"class.ux_t3lib_db.php";s:11:"objectUsage";i:4;s:5:"TOTAL";i:4;}s:24:"_searchtime_milliseconds";d:36;s:15:"_functionHeader";s:36:"function quoteStr($str, $table='')	{";}s:12:"H_892599bebf";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:13;s:5:"TOTAL";i:13;}s:14:"MD5_9a0025a766";a:3:{s:8:"fileName";s:21:"class.ux_t3lib_db.php";s:11:"objectUsage";i:13;s:5:"TOTAL";i:13;}s:24:"_searchtime_milliseconds";d:40;s:15:"_functionHeader";s:22:"function sql_error()	{";}s:12:"H_8d43f5d2ae";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_9a0025a766";a:3:{s:8:"fileName";s:21:"class.ux_t3lib_db.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:31;s:15:"_functionHeader";s:30:"function sql_num_rows(&$res)	{";}s:12:"H_5181bf7aac";a:5:{s:3:"ALL";a:2:{s:11:"objectUsage";i:6;s:5:"TOTAL";i:6;}s:14:"MD5_9a0025a766";a:3:{s:8:"fileName";s:21:"class.ux_t3lib_db.php";s:11:"objectUsage";i:2;s:5:"TOTAL";i:2;}s:14:"MD5_19aaeae789";a:3:{s:8:"fileName";s:14:"mod1/index.php";s:11:"objectUsage";i:4;s:5:"TOTAL";i:4;}s:24:"_searchtime_milliseconds";d:42;s:15:"_functionHeader";s:33:"function sql_fetch_assoc(&$res)	{";}s:12:"H_bccce8f7cd";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_9a0025a766";a:3:{s:8:"fileName";s:21:"class.ux_t3lib_db.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:38;s:15:"_functionHeader";s:31:"function sql_fetch_row(&$res)	{";}s:12:"H_6353c9f458";a:2:{s:24:"_searchtime_milliseconds";d:26;s:15:"_functionHeader";s:33:"function sql_free_result(&$res)	{";}s:12:"H_f3e8361680";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_9a0025a766";a:3:{s:8:"fileName";s:21:"class.ux_t3lib_db.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:33;s:15:"_functionHeader";s:26:"function sql_insert_id()	{";}s:12:"H_dd660adb4f";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_9a0025a766";a:3:{s:8:"fileName";s:21:"class.ux_t3lib_db.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:38;s:15:"_functionHeader";s:30:"function sql_affected_rows()	{";}s:12:"H_1f65efe545";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_9a0025a766";a:3:{s:8:"fileName";s:21:"class.ux_t3lib_db.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:40;s:15:"_functionHeader";s:37:"function sql_data_seek(&$res,$seek)	{";}s:12:"H_6500d2e72c";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_9a0025a766";a:3:{s:8:"fileName";s:21:"class.ux_t3lib_db.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:39;s:15:"_functionHeader";s:41:"function sql_field_type(&$res,$pointer)	{";}s:12:"H_b1e4dfc159";a:2:{s:24:"_searchtime_milliseconds";d:108;s:15:"_functionHeader";s:26:"function sql($db,$query)	{";}s:12:"H_f19a7d1301";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:3;s:5:"TOTAL";i:3;}s:14:"MD5_9a0025a766";a:3:{s:8:"fileName";s:21:"class.ux_t3lib_db.php";s:11:"objectUsage";i:3;s:5:"TOTAL";i:3;}s:24:"_searchtime_milliseconds";d:34;s:15:"_functionHeader";s:28:"function sql_query($query)	{";}s:12:"H_bbcdd0ae60";a:2:{s:24:"_searchtime_milliseconds";d:27;s:15:"_functionHeader";s:79:"function sql_pconnect($TYPO3_db_host, $TYPO3_db_username, $TYPO3_db_password)	{";}s:12:"H_ea759c7f5c";a:2:{s:24:"_searchtime_milliseconds";d:28;s:15:"_functionHeader";s:35:"function sql_select_db($TYPO3_db)	{";}s:12:"H_7e9bf23e5c";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:5;s:5:"TOTAL";i:5;}s:14:"MD5_9a0025a766";a:3:{s:8:"fileName";s:21:"class.ux_t3lib_db.php";s:11:"objectUsage";i:5;s:5:"TOTAL";i:5;}s:24:"_searchtime_milliseconds";d:34;s:15:"_functionHeader";s:47:"function handler_getFromTableList($tableList)	{";}s:12:"H_786597a06d";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:2;s:5:"TOTAL";i:2;}s:14:"MD5_9a0025a766";a:3:{s:8:"fileName";s:21:"class.ux_t3lib_db.php";s:11:"objectUsage";i:2;s:5:"TOTAL";i:2;}s:24:"_searchtime_milliseconds";d:39;s:15:"_functionHeader";s:36:"function handler_init($handlerKey)	{";}s:12:"H_6692461e04";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:5;s:5:"TOTAL";i:5;}s:14:"MD5_9a0025a766";a:3:{s:8:"fileName";s:21:"class.ux_t3lib_db.php";s:11:"objectUsage";i:5;s:5:"TOTAL";i:5;}s:24:"_searchtime_milliseconds";d:50;s:15:"_functionHeader";s:62:"function map_needMapping($tableList,$fieldMappingOnly=FALSE)	{";}s:12:"H_2c264fccae";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:3;s:5:"TOTAL";i:3;}s:14:"MD5_9a0025a766";a:3:{s:8:"fileName";s:21:"class.ux_t3lib_db.php";s:11:"objectUsage";i:3;s:5:"TOTAL";i:3;}s:24:"_searchtime_milliseconds";d:40;s:15:"_functionHeader";s:52:"function map_assocArray($input,$tables,$rev=FALSE)	{";}s:12:"H_2d361fc305";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_9a0025a766";a:3:{s:8:"fileName";s:21:"class.ux_t3lib_db.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:47;s:15:"_functionHeader";s:101:"function map_remapSELECTQueryParts(&$select_fields,&$from_table,&$where_clause,&$groupBy,&$orderBy)	{";}s:12:"H_c0c608ecd6";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:7;s:5:"TOTAL";i:7;}s:14:"MD5_9a0025a766";a:3:{s:8:"fileName";s:21:"class.ux_t3lib_db.php";s:11:"objectUsage";i:7;s:5:"TOTAL";i:7;}s:24:"_searchtime_milliseconds";d:59;s:15:"_functionHeader";s:54:"function map_sqlParts(&$sqlPartArray, $defaultTable)	{";}s:12:"H_f1aaae87bd";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_9a0025a766";a:3:{s:8:"fileName";s:21:"class.ux_t3lib_db.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:36;s:15:"_functionHeader";s:52:"function debugHandler($function,$execTime,$inData)	{";}s:12:"H_b5c67ebe7b";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_9a0025a766";a:3:{s:8:"fileName";s:21:"class.ux_t3lib_db.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:44;s:15:"_functionHeader";s:55:"function debug_log($query,$ms,$data,$join,$errorFlag)	{";}s:12:"H_4425106f29";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_9a0025a766";a:3:{s:8:"fileName";s:21:"class.ux_t3lib_db.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:40;s:15:"_functionHeader";s:32:"function debug_explain($query)	{";}}}s:14:"MD5_19aaeae789";a:5:{s:8:"filename";s:14:"mod1/index.php";s:8:"filesize";i:8372;s:6:"header";a:5:{s:4:"text";s:50:"

Script class; Backend module for DBAL extension
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:3:{i:0;s:42:"@author	Kasper Skaarhoj <kasper@typo3.com>";i:1;s:14:"@package TYPO3";i:2;s:19:"@subpackage tx_dbal";}s:11:"other_index";a:3:{s:7:"@author";a:1:{i:0;s:34:"Kasper Skaarhoj <kasper@typo3.com>";}s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:8:"tx_dbal ";}}}s:3:"DAT";a:5:{i:1;a:8:{s:6:"header";s:44:"class tx_dbal_module1 extends t3lib_SCbase {";s:5:"class";i:1;s:11:"parentClass";s:15:"tx_dbal_module1";s:4:"cDat";a:5:{s:4:"text";s:50:"

Script class; Backend module for DBAL extension
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:3:{i:0;s:42:"@author	Kasper Skaarhoj <kasper@typo3.com>";i:1;s:14:"@package TYPO3";i:2;s:19:"@subpackage tx_dbal";}s:11:"other_index";a:3:{s:7:"@author";a:1:{i:0;s:34:"Kasper Skaarhoj <kasper@typo3.com>";}s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:8:"tx_dbal ";}}}s:7:"content";a:2:{i:0;s:2:"
	";i:1;i:-1;}s:12:"content_size";i:2;s:13:"content_lines";i:1;s:6:"atLine";i:51;}i:3;a:7:{s:6:"header";s:23:"function menuConfig()	{";s:11:"parentClass";s:15:"tx_dbal_module1";s:4:"cDat";a:3:{s:4:"text";s:75:"

Adds items to the ->MOD_MENU array. Used for the function menu selector.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:138:"		$this->MOD_MENU = Array (
			'function' => Array (
				0 => $GLOBALS['LANG']->getLL('Debug_log')
			)
		);
		parent::menuConfig();
	}

	";i:1;i:0;}s:12:"content_size";i:138;s:13:"content_lines";i:8;s:6:"atLine";i:58;}i:5;a:7:{s:6:"header";s:17:"function main()	{";s:11:"parentClass";s:15:"tx_dbal_module1";s:4:"cDat";a:3:{s:4:"text";s:67:"

Main function of the module. Write the content to $this->content
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:507:"		global $BACK_PATH,$BE_USER;

			// Draw the header.
		$this->doc = t3lib_div::makeInstance('noDoc');
		$this->doc->backPath = $BACK_PATH;
		$this->doc->form='<form action="" method="post">';
		$this->doc->docType = 'xhtml_trans';

			// DBAL page title:
		$this->content.=$this->doc->startPage($GLOBALS['LANG']->getLL('title'));
		$this->content.=$this->doc->header($GLOBAL
[...]
on('id',implode(',',array_keys($this->MOD_MENU)),$this->MCONF['name']));
		}

		$this->content.=$this->doc->spacer(10);
	}

	";i:1;i:1;}s:12:"content_size";i:1006;s:13:"content_lines";i:25;s:6:"atLine";i:72;}i:7;a:4:{s:6:"header";s:25:"function printContent()	{";s:11:"parentClass";s:15:"tx_dbal_module1";s:4:"cDat";a:3:{s:4:"text";s:29:"

Prints out the module HTML
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:6:"atLine";i:103;}i:9;a:7:{s:6:"header";s:24:"function printLogMgm()	{";s:11:"parentClass";s:15:"tx_dbal_module1";s:4:"cDat";a:3:{s:4:"text";s:121:"

Printing the debug-log from the DBAL extension
To enabled debugging, you will have to enabled it in the configuration!
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:12:"HTML content";}}s:7:"content";a:2:{i:0;s:507:"
			// Disable debugging in any case...
		$GLOBALS['TYPO3_DB']->debug = FALSE;

			// Get cmd:
		$cmd = (string)t3lib_div::_GP('cmd');
		switch($cmd)	{
			case 'flush':
				$res = $GLOBALS['TYPO3_DB']->exec_DELETEquery('tx_dbal_debuglog','');
				$outStr = 'Log FLUSHED!';
			break;
			case 'joins':
			
					// Query:
				$res = $GLOBALS['TYPO3_DB']->exec_SELECTquery('table
[...]
/ Make instance:
$SOBE = t3lib_div::makeInstance('tx_dbal_module1');
$SOBE->init();
$SOBE->main();
$SOBE->printContent();

?>";i:1;i:1;}s:12:"content_size";i:4883;s:13:"content_lines";i:167;s:6:"atLine";i:117;}}s:10:"usageCount";a:5:{s:12:"H_68ca39e043";a:4:{s:3:"ALL";a:2:{s:12:"makeinstance";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_19aaeae789";a:3:{s:8:"fileName";s:14:"mod1/index.php";s:12:"makeinstance";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:74;s:15:"_functionHeader";s:44:"class tx_dbal_module1 extends t3lib_SCbase {";}s:12:"H_759a824b85";a:4:{s:3:"ALL";a:2:{s:14:"nonObjectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_19aaeae789";a:3:{s:8:"fileName";s:14:"mod1/index.php";s:14:"nonObjectUsage";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:29;s:15:"_functionHeader";s:23:"function menuConfig()	{";}s:12:"H_9c2550bb82";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_19aaeae789";a:3:{s:8:"fileName";s:14:"mod1/index.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:37;s:15:"_functionHeader";s:17:"function main()	{";}s:12:"H_a337945941";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_19aaeae789";a:3:{s:8:"fileName";s:14:"mod1/index.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:34;s:15:"_functionHeader";s:25:"function printContent()	{";}s:12:"H_dec4fa07f3";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_19aaeae789";a:3:{s:8:"fileName";s:14:"mod1/index.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:37;s:15:"_functionHeader";s:24:"function printLogMgm()	{";}}}s:14:"MD5_54e319931e";a:5:{s:8:"filename";s:43:"handlers/class.tx_dbal_handler_rawmysql.php";s:8:"filesize";i:5559;s:6:"header";a:5:{s:4:"text";s:79:"

Example DBAL userdefined handler class
It simply makes pass-through of MySQL
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:3:{i:0;s:42:"@author	Kasper Skaarhoj <kasper@typo3.com>";i:1;s:14:"@package TYPO3";i:2;s:19:"@subpackage tx_dbal";}s:11:"other_index";a:3:{s:7:"@author";a:1:{i:0;s:34:"Kasper Skaarhoj <kasper@typo3.com>";}s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:8:"tx_dbal ";}}}s:3:"DAT";a:16:{i:1;a:8:{s:6:"header";s:56:"class tx_dbal_handler_rawmysql extends t3lib_sqlengine {";s:5:"class";i:1;s:11:"parentClass";s:24:"tx_dbal_handler_rawmysql";s:4:"cDat";a:5:{s:4:"text";s:79:"

Example DBAL userdefined handler class
It simply makes pass-through of MySQL
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:3:{i:0;s:42:"@author	Kasper Skaarhoj <kasper@typo3.com>";i:1;s:14:"@package TYPO3";i:2;s:19:"@subpackage tx_dbal";}s:11:"other_index";a:3:{s:7:"@author";a:1:{i:0;s:34:"Kasper Skaarhoj <kasper@typo3.com>";}s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:8:"tx_dbal ";}}}s:7:"content";a:2:{i:0;s:3:"

	";i:1;i:-1;}s:12:"content_size";i:3;s:13:"content_lines";i:2;s:6:"atLine";i:78;}i:3;a:7:{s:6:"header";s:24:"function init($config)	{";s:11:"parentClass";s:24:"tx_dbal_handler_rawmysql";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:12:"$config: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:5:"	}

	";i:1;i:0;}s:12:"content_size";i:5;s:13:"content_lines";i:2;s:6:"atLine";i:87;}i:5;a:7:{s:6:"header";s:50:"function exec_INSERTquery($table,$fields_values)	{";s:11:"parentClass";s:24:"tx_dbal_handler_rawmysql";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:11:"$table: ...";}i:1;a:2:{i:0;s:6:"[type]";i:1;s:19:"$fields_values: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:5:"	}

	";i:1;i:0;}s:12:"content_size";i:5;s:13:"content_lines";i:2;s:6:"atLine";i:97;}i:7;a:7:{s:6:"header";s:57:"function exec_UPDATEquery($table,$where,$fields_values)	{";s:11:"parentClass";s:24:"tx_dbal_handler_rawmysql";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:3:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:11:"$table: ...";}i:1;a:2:{i:0;s:6:"[type]";i:1;s:11:"$where: ...";}i:2;a:2:{i:0;s:6:"[type]";i:1;s:19:"$fields_values: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:5:"	}

	";i:1;i:0;}s:12:"content_size";i:5;s:13:"content_lines";i:2;s:6:"atLine";i:108;}i:9;a:7:{s:6:"header";s:42:"function exec_DELETEquery($table,$where)	{";s:11:"parentClass";s:24:"tx_dbal_handler_rawmysql";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:11:"$table: ...";}i:1;a:2:{i:0;s:6:"[type]";i:1;s:11:"$where: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:5:"	}

	";i:1;i:0;}s:12:"content_size";i:5;s:13:"content_lines";i:2;s:6:"atLine";i:118;}i:11;a:7:{s:6:"header";s:94:"function exec_SELECTquery($select_fields,$from_table,$where_clause,$groupBy,$orderBy,$limit)	{";s:11:"parentClass";s:24:"tx_dbal_handler_rawmysql";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:6:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:19:"$select_fields: ...";}i:1;a:2:{i:0;s:6:"[type]";i:1;s:16:"$from_table: ...";}i:2;a:2:{i:0;s:6:"[type]";i:1;s:18:"$where_clause: ...";}i:3;a:2:{i:0;s:6:"[type]";i:1;s:13:"$groupBy: ...";}i:4;a:2:{i:0;s:6:"[type]";i:1;s:13:"$orderBy: ...";}i:5;a:2:{i:0;s:6:"[type]";i:1;s:11:"$limit: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:210:"		$res = t3lib_div::makeInstance('tx_dbal_handler_rawmysql_sqlObj');
		$res->result = mysql(TYPO3_db, $this->SELECTquery($select_fields,$from_table,$where_clause,$groupBy,$orderBy,$limit));
		return $res;
	}

	";i:1;i:0;}s:12:"content_size";i:210;s:13:"content_lines";i:5;s:6:"atLine";i:132;}i:13;a:7:{s:6:"header";s:22:"function sql_error()	{";s:11:"parentClass";s:24:"tx_dbal_handler_rawmysql";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:5:"	}

	";i:1;i:0;}s:12:"content_size";i:5;s:13:"content_lines";i:2;s:6:"atLine";i:143;}i:15;a:7:{s:6:"header";s:26:"function sql_insert_id()	{";s:11:"parentClass";s:24:"tx_dbal_handler_rawmysql";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:5:"	}

	";i:1;i:0;}s:12:"content_size";i:5;s:13:"content_lines";i:2;s:6:"atLine";i:151;}i:17;a:7:{s:6:"header";s:30:"function sql_affected_rows()	{";s:11:"parentClass";s:24:"tx_dbal_handler_rawmysql";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:5:"	}

	";i:1;i:0;}s:12:"content_size";i:5;s:13:"content_lines";i:2;s:6:"atLine";i:159;}i:19;a:7:{s:6:"header";s:28:"function sql_query($query)	{";s:11:"parentClass";s:24:"tx_dbal_handler_rawmysql";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:11:"$query: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:127:"		$res = t3lib_div::makeInstance('tx_dbal_handler_rawmysql_sqlObj');
		$res->result = mysql_query($query);
		return $res;
	}

	";i:1;i:0;}s:12:"content_size";i:127;s:13:"content_lines";i:5;s:6:"atLine";i:168;}i:21;a:7:{s:6:"header";s:25:"function quoteStr($str)	{";s:11:"parentClass";s:24:"tx_dbal_handler_rawmysql";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:9:"$str: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:39:"		return addslashes($str);
	}
}







";i:1;i:0;}s:12:"content_size";i:39;s:13:"content_lines";i:10;s:6:"atLine";i:180;}i:23;a:8:{s:6:"header";s:73:"class tx_dbal_handler_rawmysql_sqlObj extends t3lib_sqlengine_resultobj {";s:5:"class";i:1;s:11:"parentClass";s:31:"tx_dbal_handler_rawmysql_sqlObj";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:59:"
	$result = '';	// Not array here, but resource pointer.

	";i:1;i:-1;}s:12:"content_size";i:59;s:13:"content_lines";i:3;s:6:"atLine";i:195;}i:25;a:7:{s:6:"header";s:25:"function sql_num_rows()	{";s:11:"parentClass";s:31:"tx_dbal_handler_rawmysql_sqlObj";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:45:"		return mysql_num_rows($this->result);
	}

	";i:1;i:0;}s:12:"content_size";i:45;s:13:"content_lines";i:3;s:6:"atLine";i:204;}i:27;a:7:{s:6:"header";s:28:"function sql_fetch_assoc()	{";s:11:"parentClass";s:31:"tx_dbal_handler_rawmysql_sqlObj";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:48:"		return mysql_fetch_assoc($this->result);
	}

	";i:1;i:0;}s:12:"content_size";i:48;s:13:"content_lines";i:3;s:6:"atLine";i:213;}i:29;a:4:{s:6:"header";s:26:"function sql_fetch_row()	{";s:11:"parentClass";s:31:"tx_dbal_handler_rawmysql_sqlObj";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:6:"atLine";i:222;}i:31;a:7:{s:6:"header";s:34:"function sql_data_seek($pointer)	{";s:11:"parentClass";s:31:"tx_dbal_handler_rawmysql_sqlObj";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:13:"$pointer: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:299:"		return mysql_data_seek($this->result,$pointer);
	}
}


if (defined('TYPO3_MODE') && $TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/dbal/handlers/class.tx_dbal_handler_rawmysql.php'])	{
	include_once($TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/dbal/handlers/class.tx_dbal_handler_rawmysql.php']);
}
?>";i:1;i:0;}s:12:"content_size";i:299;s:13:"content_lines";i:8;s:6:"atLine";i:232;}}s:10:"usageCount";a:16:{s:12:"H_fd421af3c4";a:2:{s:24:"_searchtime_milliseconds";d:40;s:15:"_functionHeader";s:56:"class tx_dbal_handler_rawmysql extends t3lib_sqlengine {";}s:12:"H_4d3900dec7";a:8:{s:3:"ALL";a:2:{s:11:"objectUsage";i:7;s:5:"TOTAL";i:7;}s:14:"MD5_9a0025a766";a:3:{s:8:"fileName";s:21:"class.ux_t3lib_db.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_19aaeae789";a:3:{s:8:"fileName";s:14:"mod1/index.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_c20c57c067";a:3:{s:8:"fileName";s:19:"adodb/adodb.inc.php";s:11:"objectUsage";i:3;s:5:"TOTAL";i:3;}s:14:"MD5_b1efffa398";a:3:{s:8:"fileName";s:31:"adodb/drivers/adodb-ado.inc.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_46493f74c9";a:3:{s:8:"fileName";s:33:"adodb/drivers/adodb-mssql.inc.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:88;s:15:"_functionHeader";s:24:"function init($config)	{";}s:12:"H_9b291e60c2";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:2;s:5:"TOTAL";i:2;}s:14:"MD5_9a0025a766";a:3:{s:8:"fileName";s:21:"class.ux_t3lib_db.php";s:11:"objectUsage";i:2;s:5:"TOTAL";i:2;}s:24:"_searchtime_milliseconds";d:51;s:15:"_functionHeader";s:50:"function exec_INSERTquery($table,$fields_values)	{";}s:12:"H_495e478a6a";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_9a0025a766";a:3:{s:8:"fileName";s:21:"class.ux_t3lib_db.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:30;s:15:"_functionHeader";s:57:"function exec_UPDATEquery($table,$where,$fields_values)	{";}s:12:"H_7cdface6fe";a:5:{s:3:"ALL";a:2:{s:11:"objectUsage";i:2;s:5:"TOTAL";i:2;}s:14:"MD5_9a0025a766";a:3:{s:8:"fileName";s:21:"class.ux_t3lib_db.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_19aaeae789";a:3:{s:8:"fileName";s:14:"mod1/index.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:35;s:15:"_functionHeader";s:42:"function exec_DELETEquery($table,$where)	{";}s:12:"H_1d0875c372";a:5:{s:3:"ALL";a:2:{s:11:"objectUsage";i:5;s:5:"TOTAL";i:5;}s:14:"MD5_9a0025a766";a:3:{s:8:"fileName";s:21:"class.ux_t3lib_db.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_19aaeae789";a:3:{s:8:"fileName";s:14:"mod1/index.php";s:11:"objectUsage";i:4;s:5:"TOTAL";i:4;}s:24:"_searchtime_milliseconds";d:34;s:15:"_functionHeader";s:94:"function exec_SELECTquery($select_fields,$from_table,$where_clause,$groupBy,$orderBy,$limit)	{";}s:12:"H_892599bebf";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:13;s:5:"TOTAL";i:13;}s:14:"MD5_9a0025a766";a:3:{s:8:"fileName";s:21:"class.ux_t3lib_db.php";s:11:"objectUsage";i:13;s:5:"TOTAL";i:13;}s:24:"_searchtime_milliseconds";d:47;s:15:"_functionHeader";s:22:"function sql_error()	{";}s:12:"H_f3e8361680";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_9a0025a766";a:3:{s:8:"fileName";s:21:"class.ux_t3lib_db.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:32;s:15:"_functionHeader";s:26:"function sql_insert_id()	{";}s:12:"H_dd660adb4f";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_9a0025a766";a:3:{s:8:"fileName";s:21:"class.ux_t3lib_db.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:38;s:15:"_functionHeader";s:30:"function sql_affected_rows()	{";}s:12:"H_f19a7d1301";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:3;s:5:"TOTAL";i:3;}s:14:"MD5_9a0025a766";a:3:{s:8:"fileName";s:21:"class.ux_t3lib_db.php";s:11:"objectUsage";i:3;s:5:"TOTAL";i:3;}s:24:"_searchtime_milliseconds";d:41;s:15:"_functionHeader";s:28:"function sql_query($query)	{";}s:12:"H_c8ff48212f";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:4;s:5:"TOTAL";i:4;}s:14:"MD5_9a0025a766";a:3:{s:8:"fileName";s:21:"class.ux_t3lib_db.php";s:11:"objectUsage";i:4;s:5:"TOTAL";i:4;}s:24:"_searchtime_milliseconds";d:38;s:15:"_functionHeader";s:25:"function quoteStr($str)	{";}s:12:"H_71ad7f3507";a:4:{s:3:"ALL";a:2:{s:12:"makeinstance";i:2;s:5:"TOTAL";i:2;}s:14:"MD5_54e319931e";a:3:{s:8:"fileName";s:43:"handlers/class.tx_dbal_handler_rawmysql.php";s:12:"makeinstance";i:2;s:5:"TOTAL";i:2;}s:24:"_searchtime_milliseconds";d:24;s:15:"_functionHeader";s:73:"class tx_dbal_handler_rawmysql_sqlObj extends t3lib_sqlengine_resultobj {";}s:12:"H_3788d29f7d";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_9a0025a766";a:3:{s:8:"fileName";s:21:"class.ux_t3lib_db.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:34;s:15:"_functionHeader";s:25:"function sql_num_rows()	{";}s:12:"H_2d28932c42";a:5:{s:3:"ALL";a:2:{s:11:"objectUsage";i:6;s:5:"TOTAL";i:6;}s:14:"MD5_9a0025a766";a:3:{s:8:"fileName";s:21:"class.ux_t3lib_db.php";s:11:"objectUsage";i:2;s:5:"TOTAL";i:2;}s:14:"MD5_19aaeae789";a:3:{s:8:"fileName";s:14:"mod1/index.php";s:11:"objectUsage";i:4;s:5:"TOTAL";i:4;}s:24:"_searchtime_milliseconds";d:49;s:15:"_functionHeader";s:28:"function sql_fetch_assoc()	{";}s:12:"H_69ca6ff9bc";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_9a0025a766";a:3:{s:8:"fileName";s:21:"class.ux_t3lib_db.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:40;s:15:"_functionHeader";s:26:"function sql_fetch_row()	{";}s:12:"H_01d4cdbbfe";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_9a0025a766";a:3:{s:8:"fileName";s:21:"class.ux_t3lib_db.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:47;s:15:"_functionHeader";s:34:"function sql_data_seek($pointer)	{";}}}s:14:"MD5_f5ce71f488";a:5:{s:8:"filename";s:40:"handlers/class.tx_dbal_handler_xmldb.php";s:8:"filesize";i:3445;s:6:"header";a:5:{s:4:"text";s:65:"

Example DBAL handler class
Stores data in XML, not a database.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:3:{i:0;s:42:"@author	Kasper Skaarhoj <kasper@typo3.com>";i:1;s:14:"@package TYPO3";i:2;s:19:"@subpackage tx_dbal";}s:11:"other_index";a:3:{s:7:"@author";a:1:{i:0;s:34:"Kasper Skaarhoj <kasper@typo3.com>";}s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:8:"tx_dbal ";}}}s:3:"DAT";a:4:{i:1;a:8:{s:6:"header";s:53:"class tx_dbal_handler_xmldb extends t3lib_sqlengine {";s:5:"class";i:1;s:11:"parentClass";s:21:"tx_dbal_handler_xmldb";s:4:"cDat";a:5:{s:4:"text";s:65:"

Example DBAL handler class
Stores data in XML, not a database.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:3:{i:0;s:42:"@author	Kasper Skaarhoj <kasper@typo3.com>";i:1;s:14:"@package TYPO3";i:2;s:19:"@subpackage tx_dbal";}s:11:"other_index";a:3:{s:7:"@author";a:1:{i:0;s:34:"Kasper Skaarhoj <kasper@typo3.com>";}s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:8:"tx_dbal ";}}}s:7:"content";a:2:{i:0;s:29:"
	var $config = array();	
	
	";i:1;i:-1;}s:12:"content_size";i:29;s:13:"content_lines";i:3;s:6:"atLine";i:63;}i:3;a:7:{s:6:"header";s:24:"function init($config)	{";s:11:"parentClass";s:21:"tx_dbal_handler_xmldb";s:4:"cDat";a:3:{s:4:"text";s:21:"

Initialize handler
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:23:"Configuration from DBAL";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:32:"		$this->config = $config;
	}

	";i:1;i:0;}s:12:"content_size";i:32;s:13:"content_lines";i:3;s:6:"atLine";i:73;}i:5;a:4:{s:6:"header";s:33:"function readDataSource($table)	{";s:11:"parentClass";s:21:"tx_dbal_handler_xmldb";s:4:"cDat";a:3:{s:4:"text";s:43:"

Setting table data (overriding function)
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:10:"Table name";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:6:"atLine";i:83;}i:7;a:6:{s:6:"header";s:33:"function saveDataSource($table)	{";s:11:"parentClass";s:21:"tx_dbal_handler_xmldb";s:7:"content";a:2:{i:0;s:507:"		$xmlFile = t3lib_div::getFileAbsFileName($this->config['config']['tableFiles'][$table]);
		$fI = pathinfo($xmlFile);

		if ($xmlFile && @is_file($xmlFile) && strtolower($fI['extension'])=='xml')	{
			$storeInCharset = $GLOBALS['LANG']->charSet;
			$xmlValue = t3lib_div::array2xml($this->data[$table],'',0,'T3xmlDB',0,array('useIndexTagForNum'=>'rec'));
			$content = '<?xm
[...]
ldb.php'])	{
	include_once($TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/dbal/handlers/class.tx_dbal_handler_xmldb.php']);
}
?>";i:1;i:1;}s:12:"content_size";i:753;s:13:"content_lines";i:16;s:6:"atLine";i:108;}}s:10:"usageCount";a:4:{s:12:"H_7236c5bbf1";a:2:{s:24:"_searchtime_milliseconds";d:90;s:15:"_functionHeader";s:53:"class tx_dbal_handler_xmldb extends t3lib_sqlengine {";}s:12:"H_4d3900dec7";a:8:{s:3:"ALL";a:2:{s:11:"objectUsage";i:7;s:5:"TOTAL";i:7;}s:14:"MD5_9a0025a766";a:3:{s:8:"fileName";s:21:"class.ux_t3lib_db.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_19aaeae789";a:3:{s:8:"fileName";s:14:"mod1/index.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_c20c57c067";a:3:{s:8:"fileName";s:19:"adodb/adodb.inc.php";s:11:"objectUsage";i:3;s:5:"TOTAL";i:3;}s:14:"MD5_b1efffa398";a:3:{s:8:"fileName";s:31:"adodb/drivers/adodb-ado.inc.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_46493f74c9";a:3:{s:8:"fileName";s:33:"adodb/drivers/adodb-mssql.inc.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:78;s:15:"_functionHeader";s:24:"function init($config)	{";}s:12:"H_079d0245c8";a:2:{s:24:"_searchtime_milliseconds";d:28;s:15:"_functionHeader";s:33:"function readDataSource($table)	{";}s:12:"H_98b7a63b34";a:2:{s:24:"_searchtime_milliseconds";d:31;s:15:"_functionHeader";s:33:"function saveDataSource($table)	{";}}}}}